generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user_profile {
  id           Int      @id @default(autoincrement())
  nome         String   @db.VarChar(50)
  cognome      String   @db.VarChar(50)
  data_nascita DateTime @db.DateTime(0)
  sesso        String?  @db.Char(1)
  is_complete  Int      @default(0) @db.TinyInt
  createdAt    DateTime @default(now())
  user         user     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_profile")
}

model user {
  id                 Int                  @id @default(autoincrement())
  email              String?              @db.VarChar(60)
  password           String?              @db.VarChar(255)
  username           String?              @unique
  createdAt          DateTime             @default(now())
  role               Role                 @default(USER)
  oauthId            String?              @db.VarChar(100)
  provider           String               @db.VarChar(30)
  category           category[]
  habits             habit[]
  passwordresettoken passwordresettoken[]
  user_preferences   user_preferences?
  user_profile       user_profile?

  @@unique([email, provider], map: "email_provider_UNIQUE")
  @@unique([provider, oauthId], map: "provider_oauthId_UNIQUE")
}

model passwordresettoken {
  id        Int      @id @default(autoincrement())
  token     String   @unique(map: "PasswordResetToken_token_key")
  createdAt DateTime @default(now())
  resetAt   DateTime @default(now())
  userId    Int
  expiresAt DateTime
  user      user     @relation(fields: [userId], references: [id], map: "fk_user")

  @@index([userId], map: "fk_user")
}

model user_preferences {
  id                  Int         @id @default(autoincrement())
  theme               Theme       @default(system)
  sidebarDefaultOpen  Boolean     @default(true)
  sidebarOpenShortcut String      @default("b")
  sidebarSide         SidebarSide @default(left)
  sidebarType         SidebarType @default(floating)
  createdAt           DateTime    @default(now())
  lang                String      @default("it") @db.VarChar(30)
  user                user        @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_preferences")
}

model category {
  id          Int     @id @default(autoincrement())
  titolo      String
  descrizione String? @db.VarChar(255)
  icona       String?
  colore      String?
  userId      Int?
  user        user?   @relation(fields: [userId], references: [id])
  habits      habit[]

  @@index([userId], map: "category_userId_fkey")
}

model habit {
  id          Int           @id @default(autoincrement())
  userId      Int
  categoriaId Int
  titolo      String
  descrizione String?
  startDate   DateTime
  endDate     DateTime?
  color       String?
  priority    String?
  isActive    Boolean       @default(true)
  visibility  String?
  targetValue Int?
  categoria   category      @relation(fields: [categoriaId], references: [id])
  user        user          @relation(fields: [userId], references: [id])
  habitlog    habitlog[]
  habitrepeat habitrepeat[]

  @@index([categoriaId], map: "habit_categoriaId_fkey")
  @@index([userId], map: "habit_userId_fkey")
}

model habitlog {
  id        Int      @id @default(autoincrement())
  habitId   Int
  logDate   DateTime
  completed Boolean  @default(false)
  value     Int?
  note      String?
  createdAt DateTime @default(now())
  habit     habit    @relation(fields: [habitId], references: [id], map: "HabitLog_habitId_fkey")

  @@unique([habitId, logDate], map: "HabitLog_habitId_logDate_key")
}

model habitrepeat {
  id        Int      @id @default(autoincrement())
  habitId   Int
  type      String
  dayOfWeek Int?
  interval  Int?
  startDate DateTime
  habit     habit    @relation(fields: [habitId], references: [id], map: "HabitRepeat_habitId_fkey")

  @@index([habitId], map: "HabitRepeat_habitId_fkey")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Theme {
  light
  dark
  system
}

enum SidebarSide {
  left
  right
}

enum SidebarType {
  sidebar
  floating
  inset
}
